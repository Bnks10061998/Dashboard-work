// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import bodyParser from 'body-parser';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken'; 
// import User from './src/models/User.js';
// import workRoutes from './src/routes/workRoutes.js';
// import Client from './src/models/Client.js';

// import referralRoutes from './src/routes/referralRoutes.js';

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;


// // Middleware,routes
// app.use(cors());
// // app.use(bodyParser.json());
// app.use(bodyParser.json({ limit: '10mb' }));
// app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));
// app.use('/api/work', workRoutes);

// // app.use('/uploads', express.static('uploads')); 
// app.use('/api/referrals', referralRoutes);

// // MongoDB Connection
// mongoose.connect(process.env.MONGO_URL, {
//   dbName: process.env.dbName,
// })
//   .then(() => console.log('MongoDB connected'))
//   .catch((err) => console.error('MongoDB connection error:', err));

// // Signup Route
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// //Client List
// app.get('/api/clients', async (req, res) => {
//   const clients = await Client.find();
//   res.json(clients);
// });

// app.post('/api/clients', async (req, res) => {
//   const newClient = new Client(req.body);
//   await newClient.save();
//   res.status(201).json(newClient);
// });

// app.put('/api/clients/:id', async (req, res) => {
//   const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//   res.json(updated);
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   await Client.findByIdAndDelete(req.params.id);
//   res.json({ message: 'Client deleted' });
// });

// // Login Route with JWT
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     // Generate JWT
//     const token = jwt.sign(
//       { id: user._id, email: user.email },
//       process.env.JWT_SECRET,
//       { expiresIn: '10h' }
//     );

//     res.status(200).json({ message: 'Login successful', token });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });



// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import bodyParser from 'body-parser';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';

// import User from './src/models/User.js';
// import Client from './src/models/Client.js';

// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import projectRoutes from './src/routes/projectRoutes.js'; // ✅ NEW

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(bodyParser.json({ limit: '10mb' }));
// app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));

// // API Routes
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);
// app.use('/api/projects', projectRoutes); // ✅ NEW
// app.use('/api/clients', async (req, res, next) => {
//   if (req.method === 'GET') {
//     const clients = await Client.find();
//     return res.json(clients);
//   }
//   next();
// });

// // MongoDB Connection
// mongoose.connect(process.env.MONGO_URL, {
//   dbName: process.env.dbName,
// })
//   .then(() => console.log('MongoDB connected'))
//   .catch((err) => console.error('MongoDB connection error:', err));

// // Signup Route
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Login Route
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign(
//       { id: user._id, email: user.email },
//       process.env.JWT_SECRET,
//       { expiresIn: '10h' }
//     );

//     res.status(200).json({ message: 'Login successful', token });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Client CRUD routes
// app.post('/api/clients', async (req, res) => {
//   try {
//     const newClient = new Client(req.body);
//     await newClient.save();
//     res.status(201).json(newClient);
//   } catch (err) {
//     res.status(500).json({ message: err.message });
//   }
// });

// app.put('/api/clients/:id', async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     res.json(updated);
//   } catch (err) {
//     res.status(500).json({ message: err.message });
//   }
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   try {
//     await Client.findByIdAndDelete(req.params.id);
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: err.message });
//   }
// });

// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });



// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import bodyParser from 'body-parser';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';

// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(bodyParser.json({ limit: '10mb' }));
// app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));

// // JWT Authentication Middleware
// const authenticateToken = (req, res, next) => {
//   const authHeader = req.headers['authorization'];
//   const token = authHeader?.split(' ')[1];
//   if (!token) return res.status(401).json({ message: 'Access token required' });

//   jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
//     if (err) return res.status(403).json({ message: 'Invalid token' });
//     req.user = user;
//     next();
//   });
// };

// // Routes
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);

// // MongoDB Connection
// mongoose
//   .connect(process.env.MONGO_URL, { dbName: process.env.dbName })
//   .then(() => console.log('MongoDB connected'))
//   .catch(err => console.error('MongoDB connection error:', err));

// // Auth Routes
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '10h',
//     });

//     res.status(200).json({ message: 'Login successful', token });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Client CRUD
// app.get('/api/clients', async (req, res) => {
//   const clients = await Client.find();
//   res.json(clients);
// });

// app.post('/api/clients', async (req, res) => {
//   const newClient = new Client(req.body);
//   await newClient.save();
//   res.status(201).json(newClient);
// });

// app.put('/api/clients/:id', async (req, res) => {
//   const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//   res.json(updated);
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   await Client.findByIdAndDelete(req.params.id);
//   res.json({ message: 'Client deleted' });
// });

// // ✅ Project CRUD with Auth and Pagination
// app.get('/api/projects', authenticateToken, async (req, res) => {
//   const { page = 1, limit = 10, search = '', status } = req.query;
//   const query = {
//     name: { $regex: search, $options: 'i' },
//     ...(status ? { status } : {}),
//   };

//   const total = await Project.countDocuments(query);
//   const projects = await Project.find(query)
//     .skip((page - 1) * limit)
//     .limit(Number(limit));

//   res.json({ projects, total });
// });

// app.post('/api/projects', authenticateToken, async (req, res) => {
//   const newProject = new Project(req.body);
//   await newProject.save();
//   res.status(201).json(newProject);
// });

// app.get('/api/projects/:id', authenticateToken, async (req, res) => {
//   const project = await Project.findById(req.params.id);
//   res.json(project);
// });

// app.put('/api/projects/:id', authenticateToken, async (req, res) => {
//   const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//   res.json(updated);
// });

// app.delete('/api/projects/:id', authenticateToken, async (req, res) => {
//   await Project.findByIdAndDelete(req.params.id);
//   res.json({ message: 'Project deleted' });
// });

// // Start server
// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });


// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import bodyParser from 'body-parser';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';

// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(bodyParser.json({ limit: '10mb' }));
// app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));

// // JWT Authentication Middleware
// const authenticateToken = (req, res, next) => {
//   const authHeader = req.headers['authorization'];
//   const token = authHeader?.split(' ')[1];
//   if (!token) return res.status(401).json({ message: 'Access token required' });

//   jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
//     if (err) return res.status(403).json({ message: 'Invalid or expired token' });
//     req.user = user;
//     next();
//   });
// };

// // Routes
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);

// // MongoDB Connection
// mongoose
//   .connect(process.env.MONGO_URL, { dbName: process.env.dbName })
//   .then(() => console.log('MongoDB connected'))
//   .catch((err) => console.error('MongoDB connection error:', err));

// // Auth Routes
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '10h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Client CRUD
// app.get('/api/clients', async (req, res) => {
//   const clients = await Client.find();
//   res.json(clients);
// });

// app.post('/api/clients', async (req, res) => {
//   const newClient = new Client(req.body);
//   await newClient.save();
//   res.status(201).json(newClient);
// });

// app.put('/api/clients/:id', async (req, res) => {
//   const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//   res.json(updated);
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   await Client.findByIdAndDelete(req.params.id);
//   res.json({ message: 'Client deleted' });
// });

// // ✅ Project CRUD with Auth and Pagination
// app.get('/api/projects', authenticateToken, async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     console.error('Error fetching projects:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.post('/api/projects', authenticateToken, async (req, res) => {
//   const newProject = new Project(req.body);
//   await newProject.save();
//   res.status(201).json(newProject);
// });

// app.get('/api/projects/:id', authenticateToken, async (req, res) => {
//   const project = await Project.findById(req.params.id);
//   res.json(project);
// });

// app.put('/api/projects/:id', authenticateToken, async (req, res) => {
//   const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//   res.json(updated);
// });

// app.delete('/api/projects/:id', authenticateToken, async (req, res) => {
//   await Project.findByIdAndDelete(req.params.id);
//   res.json({ message: 'Project deleted' });
// });

// // Start server
// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });


// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';

// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));

// // JWT Middleware
// const authenticateToken = (req, res, next) => {
//   const authHeader = req.headers['authorization'];
//   const token = authHeader?.split(' ')[1];
//   if (!token) return res.status(401).json({ message: 'Access token required' });

//   jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
//     if (err) return res.status(403).json({ message: 'Invalid or expired token' });
//     req.user = user;
//     next();
//   });
// };

// // Routes
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);

// // MongoDB connection
// mongoose
//   .connect(process.env.MONGO_URL, { dbName: process.env.dbName })
//   .then(() => console.log('✅ MongoDB connected'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // Auth - Signup
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Auth - Login
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '10h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // ✅ Clients (Optional: protected with JWT)
// app.get('/api/clients', authenticateToken, async (req, res) => {
//   try {
//     const clients = await Client.find();
//     res.json(clients);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching clients', error: err.message });
//   }
// });

// app.post('/api/clients', authenticateToken, async (req, res) => {
//   try {
//     const newClient = new Client(req.body);
//     await newClient.save();
//     res.status(201).json(newClient);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating client', error: err.message });
//   }
// });

// app.put('/api/clients/:id', authenticateToken, async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Client not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating client', error: err.message });
//   }
// });

// app.delete('/api/clients/:id', authenticateToken, async (req, res) => {
//   try {
//     const deleted = await Client.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Client not found' });
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting client', error: err.message });
//   }
// });

// // ✅ Projects
// app.get('/api/projects', authenticateToken, async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching projects', error: err.message });
//   }
// });

// app.post('/api/projects', authenticateToken, async (req, res) => {
//   try {
//     const newProject = new Project(req.body);
//     await newProject.save();
//     res.status(201).json(newProject);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating project', error: err.message });
//   }
// });

// app.get('/api/projects/:id', authenticateToken, async (req, res) => {
//   try {
//     const project = await Project.findById(req.params.id);
//     if (!project) return res.status(404).json({ message: 'Project not found' });
//     res.json(project);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching project', error: err.message });
//   }
// });

// app.put('/api/projects/:id', authenticateToken, async (req, res) => {
//   try {
//     const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Project not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating project', error: err.message });
//   }
// });

// app.delete('/api/projects/:id', authenticateToken, async (req, res) => {
//   try {
//     const deleted = await Project.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Project not found' });
//     res.json({ message: 'Project deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting project', error: err.message });
//   }
// });

// // Start server
// app.listen(PORT, () => {
//   console.log(`🚀 Server running on http://localhost:${PORT}`);
// });

// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';
// import morgan from 'morgan';

// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import uploadRoutes from './src/routes/uploadRoutes.js';

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));

// // Logging
// if (process.env.NODE_ENV === 'development') {
//   app.use(morgan('dev'));
// }

// // Routes
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);

// // app.use('/uploads', express.static('uploads'));
// app.use('/api', uploadRoutes);

// // MongoDB connection
// mongoose
//   .connect(process.env.MONGO_URL, { dbName: process.env.dbName })
//   .then(() => console.log('✅ MongoDB connected'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // Auth - Signup
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Auth - Login (still returns token, but unused now)
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '10h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Clients - No auth
// app.get('/api/clients', async (req, res) => {
//   try {
//     const clients = await Client.find();
//     res.json(clients);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching clients', error: err.message });
//   }
// });

// app.post('/api/clients', async (req, res) => {
//   try {
//     const newClient = new Client(req.body);
//     await newClient.save();
//     res.status(201).json(newClient);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating client', error: err.message });
//   }
// });

// app.put('/api/clients/:id', async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Client not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating client', error: err.message });
//   }
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   try {
//     const deleted = await Client.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Client not found' });
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting client', error: err.message });
//   }
// });

// // Projects - No auth
// app.get('/api/projects', async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching projects', error: err.message });
//   }
// });

// app.post('/api/projects', async (req, res) => {
//   try {
//     const newProject = new Project(req.body);
//     await newProject.save();
//     res.status(201).json(newProject);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating project', error: err.message });
//   }
// });

// app.get('/api/projects/:id', async (req, res) => {
//   try {
//     const project = await Project.findById(req.params.id);
//     if (!project) return res.status(404).json({ message: 'Project not found' });
//     res.json(project);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching project', error: err.message });
//   }
// });

// app.put('/api/projects/:id', async (req, res) => {
//   try {
//     const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Project not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating project', error: err.message });
//   }
// });

// app.delete('/api/projects/:id', async (req, res) => {
//   try {
//     const deleted = await Project.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Project not found' });
//     res.json({ message: 'Project deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting project', error: err.message });
//   }
// });

// // Start server
// app.listen(PORT, () => {
//   console.log(`🚀 Server running on http://localhost:${PORT}`);
// });


// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';
// import morgan from 'morgan';
// import { fileURLToPath } from 'url';

// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import uploadRoutes from './src/routes/uploadRoutes.js';

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));

// // Logging
// if (process.env.NODE_ENV === 'development') {
//   app.use(morgan('dev'));
// }

// // Routes
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);
// app.use('/api/gallery', uploadRoutes);  // Image upload route

// // MongoDB connection
// mongoose
//   .connect(process.env.MONGO_URL, { dbName: process.env.dbName })
//   .then(() => console.log('✅ MongoDB connected'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // Auth - Signup
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Auth - Login
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '10h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Clients - No auth
// app.get('/api/clients', async (req, res) => {
//   try {
//     const clients = await Client.find();
//     res.json(clients);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching clients', error: err.message });
//   }
// });

// app.post('/api/clients', async (req, res) => {
//   try {
//     const newClient = new Client(req.body);
//     await newClient.save();
//     res.status(201).json(newClient);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating client', error: err.message });
//   }
// });

// app.put('/api/clients/:id', async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Client not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating client', error: err.message });
//   }
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   try {
//     const deleted = await Client.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Client not found' });
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting client', error: err.message });
//   }
// });

// // Projects - No auth
// app.get('/api/projects', async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching projects', error: err.message });
//   }
// });

// app.post('/api/projects', async (req, res) => {
//   try {
//     const newProject = new Project(req.body);
//     await newProject.save();
//     res.status(201).json(newProject);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating project', error: err.message });
//   }
// });

// app.get('/api/projects/:id', async (req, res) => {
//   try {
//     const project = await Project.findById(req.params.id);
//     if (!project) return res.status(404).json({ message: 'Project not found' });
//     res.json(project);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching project', error: err.message });
//   }
// });

// app.put('/api/projects/:id', async (req, res) => {
//   try {
//     const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Project not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating project', error: err.message });
//   }
// });

// app.delete('/api/projects/:id', async (req, res) => {
//   try {
//     const deleted = await Project.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Project not found' });
//     res.json({ message: 'Project deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting project', error: err.message });
//   }
// });

// // Start server
// app.listen(PORT, () => {
//   console.log(`🚀 Server running on http://localhost:${PORT}`);
// });



// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';
// import morgan from 'morgan';
// import path from 'path';
// import { fileURLToPath } from 'url';

// // Models
// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';

// // Routes
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import imageRoutes from './src/routes/imageRoutes.js'


// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.urlencoded({ limit: '10mb', extended: true }));

// // Serve uploaded images
// app.use('/uploads', express.static('uploads'));

// // Logging
// if (process.env.NODE_ENV === 'development') {
//   app.use(morgan('dev'));
// }

// //Images upload
// app.use('/api/images', imageRoutes);

// // MongoDB Connection
// mongoose
//   .connect(process.env.MONGO_URL, { dbName: process.env.dbName })
//   .then(() => console.log('✅ MongoDB connected'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // ========== ROUTES ========== //

// // Auth - Signup
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Auth - Login
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '10h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Clients CRUD
// app.get('/api/clients', async (req, res) => {
//   try {
//     const clients = await Client.find();
//     res.json(clients);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching clients', error: err.message });
//   }
// });

// app.post('/api/clients', async (req, res) => {
//   try {
//     const newClient = new Client(req.body);
//     await newClient.save();
//     res.status(201).json(newClient);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating client', error: err.message });
//   }
// });

// app.put('/api/clients/:id', async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Client not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating client', error: err.message });
//   }
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   try {
//     const deleted = await Client.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Client not found' });
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting client', error: err.message });
//   }
// });

// // Projects CRUD
// app.get('/api/projects', async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching projects', error: err.message });
//   }
// });

// app.post('/api/projects', async (req, res) => {
//   try {
//     const newProject = new Project(req.body);
//     await newProject.save();
//     res.status(201).json(newProject);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating project', error: err.message });
//   }
// });

// app.get('/api/projects/:id', async (req, res) => {
//   try {
//     const project = await Project.findById(req.params.id);
//     if (!project) return res.status(404).json({ message: 'Project not found' });
//     res.json(project);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching project', error: err.message });
//   }
// });

// app.put('/api/projects/:id', async (req, res) => {
//   try {
//     const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Project not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating project', error: err.message });
//   }
// });

// app.delete('/api/projects/:id', async (req, res) => {
//   try {
//     const deleted = await Project.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Project not found' });
//     res.json({ message: 'Project deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting project', error: err.message });
//   }
// });

// // ========== Feature Routes ========== //
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);
// app.use('/api/gallery', uploadRoutes); // Image Upload + Gallery

// // ========== Start Server ========== //
// app.listen(PORT, () => {
//   console.log(`🚀 Server running on http://localhost:${PORT}`);
// });



// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';
// import morgan from 'morgan';
// import path from 'path';
// import { fileURLToPath } from 'url';

// // Load environment variables
// dotenv.config();

// const app = express();
// const PORT = process.env.PORT || 5000;

// // Models
// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';

// // Routes
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import imageRoutes from './src/routes/imageRoutes.js';


// // Middleware
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// // Serve uploaded files
// app.use('/uploads', express.static('uploads'));

// // Logging
// if (process.env.NODE_ENV === 'development') {
//   app.use(morgan('dev'));
// }

// // MongoDB Connection
// mongoose
//   .connect(process.env.MONGO_URL, {
//     dbName: process.env.dbName,
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//   })
//   .then(() => console.log('✅ MongoDB connected'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // ========== AUTH ROUTES ========== //

// // Signup
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();

//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Login
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '60h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // ========== CLIENTS ROUTES ========== //
// app.get('/api/clients', async (req, res) => {
//   try {
//     const clients = await Client.find();
//     res.json(clients);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching clients', error: err.message });
//   }
// });

// app.post('/api/clients', async (req, res) => {
//   try {
//     const newClient = new Client(req.body);
//     await newClient.save();
//     res.status(201).json(newClient);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating client', error: err.message });
//   }
// });

// app.put('/api/clients/:id', async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Client not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating client', error: err.message });
//   }
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   try {
//     const deleted = await Client.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Client not found' });
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting client', error: err.message });
//   }
// });

// // ========== PROJECTS ROUTES ========== //
// app.get('/api/projects', async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching projects', error: err.message });
//   }
// });

// app.post('/api/projects', async (req, res) => {
//   try {
//     const newProject = new Project(req.body);
//     await newProject.save();
//     res.status(201).json(newProject);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating project', error: err.message });
//   }
// });

// app.get('/api/projects/:id', async (req, res) => {
//   try {
//     const project = await Project.findById(req.params.id);
//     if (!project) return res.status(404).json({ message: 'Project not found' });
//     res.json(project);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching project', error: err.message });
//   }
// });

// app.put('/api/projects/:id', async (req, res) => {
//   try {
//     const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Project not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating project', error: err.message });
//   }
// });

// app.delete('/api/projects/:id', async (req, res) => {
//   try {
//     const deleted = await Project.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Project not found' });
//     res.json({ message: 'Project deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting project', error: err.message });
//   }
// });

// // ========== FEATURE ROUTES ========== //
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);
// app.use('/api/gallery', uploadRoutes);
// app.use('/api/images', imageRoutes);

// // ========== FALLBACK ROUTE ========== //
// app.use('*', (req, res) => {
//   res.status(404).json({ message: 'API route not found' });
// });

// // ========== START SERVER ========== //
// app.listen(PORT, () => {
//   console.log(`🚀 Server running on http://localhost:${PORT}`);
// });


// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';
// import morgan from 'morgan';

// // Load environment variables
// dotenv.config();

// const app = express();
// const PORT = process.env.PORT || 5000;

// // Models
// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';

// // Routes
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import imageRoutes from './src/routes/imageRoutes.js';


// // Middleware
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// // Serve uploaded files
// app.use('/uploads', express.static('uploads'));

// // Logging
// if (process.env.NODE_ENV === 'development') {
//   app.use(morgan('dev'));
// }



// // MongoDB Connection
// mongoose
//   .connect(process.env.MONGO_URL, {
//     dbName: process.env.dbName,
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//   })
//   .then(() => console.log('✅ MongoDB connected'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // ========== AUTH ROUTES ========== //

// // Signup
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();

//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // Login
// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '60h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

// // ========== CLIENT ROUTES ========== //
// app.get('/api/clients', async (req, res) => {
//   try {
//     const clients = await Client.find();
//     res.json(clients);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching clients', error: err.message });
//   }
// });

// app.post('/api/clients', async (req, res) => {
//   try {
//     const newClient = new Client(req.body);
//     await newClient.save();
//     res.status(201).json(newClient);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating client', error: err.message });
//   }
// });

// app.put('/api/clients/:id', async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Client not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating client', error: err.message });
//   }
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   try {
//     const deleted = await Client.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Client not found' });
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting client', error: err.message });
//   }
// });

// // ========== PROJECT ROUTES ========== //
// app.get('/api/projects', async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching projects', error: err.message });
//   }
// });

// app.post('/api/projects', async (req, res) => {
//   try {
//     const newProject = new Project(req.body);
//     await newProject.save();
//     res.status(201).json(newProject);
//   } catch (err) {
//     res.status(400).json({ message: 'Error creating project', error: err.message });
//   }
// });

// app.get('/api/projects/:id', async (req, res) => {
//   try {
//     const project = await Project.findById(req.params.id);
//     if (!project) return res.status(404).json({ message: 'Project not found' });
//     res.json(project);
//   } catch (err) {
//     res.status(500).json({ message: 'Error fetching project', error: err.message });
//   }
// });

// app.put('/api/projects/:id', async (req, res) => {
//   try {
//     const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Project not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Error updating project', error: err.message });
//   }
// });

// app.delete('/api/projects/:id', async (req, res) => {
//   try {
//     const deleted = await Project.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Project not found' });
//     res.json({ message: 'Project deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Error deleting project', error: err.message });
//   }
// });

// // ========== FEATURE ROUTES ========== //
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);
// app.use('/api/gallery', imageRoutes); // ✅ Corrected usage

// // ========== FALLBACK ROUTE ========== //
// app.use('*', (req, res) => {
//   res.status(404).json({ message: 'API route not found' });
// });

// // ========== START SERVER ========== //
// app.listen(PORT, () => {
//   console.log(`🚀 Server running on http://localhost:${PORT}`);
// });


// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';
// import morgan from 'morgan';

// // Load env variables
// dotenv.config();

// const app = express();
// const PORT = process.env.PORT || 5000;

// // ======== Models ======== //
// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';

// // ======== Routes ======== //
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import imageRoutes from './src/routes/imageRoutes.js';

// // ======== Middleware ======== //
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.urlencoded({ extended: true, limit: '10mb' }));
// app.use('/uploads', express.static('uploads')); // Serve uploaded images
// if (process.env.NODE_ENV === 'development') app.use(morgan('dev'));

// // ======== MongoDB Connection ======== //
// mongoose
//   .connect(process.env.MONGO_URL, {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     dbName: process.env.DB_NAME, // ✅ Ensure this is set in your .env
//   })
//   .then(() => console.log('✅ MongoDB connected'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // ======== Auth Routes ======== //
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();

//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     res.status(500).json({ message: 'Signup error', error: err.message });
//   }
// });

// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '60h',
//     });

//     res.status(200).json({
//       message: 'Login successful',
//       token,
//       user: { id: user._id, email: user.email },
//     });
//   } catch (err) {
//     res.status(500).json({ message: 'Login error', error: err.message });
//   }
// });

// // ======== Client Routes ======== //
// app.get('/api/clients', async (req, res) => {
//   try {
//     const clients = await Client.find();
//     res.json(clients);
//   } catch (err) {
//     res.status(500).json({ message: 'Fetch error', error: err.message });
//   }
// });

// app.post('/api/clients', async (req, res) => {
//   try {
//     const client = new Client(req.body);
//     await client.save();
//     res.status(201).json(client);
//   } catch (err) {
//     res.status(400).json({ message: 'Create error', error: err.message });
//   }
// });

// app.put('/api/clients/:id', async (req, res) => {
//   try {
//     const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Client not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Update error', error: err.message });
//   }
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   try {
//     const deleted = await Client.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Client not found' });
//     res.json({ message: 'Client deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Delete error', error: err.message });
//   }
// });

// // ======== Project Routes ======== //
// app.get('/api/projects', async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     res.status(500).json({ message: 'Fetch error', error: err.message });
//   }
// });

// app.post('/api/projects', async (req, res) => {
//   try {
//     const project = new Project(req.body);
//     await project.save();
//     res.status(201).json(project);
//   } catch (err) {
//     res.status(400).json({ message: 'Create error', error: err.message });
//   }
// });

// app.get('/api/projects/:id', async (req, res) => {
//   try {
//     const project = await Project.findById(req.params.id);
//     if (!project) return res.status(404).json({ message: 'Project not found' });
//     res.json(project);
//   } catch (err) {
//     res.status(500).json({ message: 'Fetch error', error: err.message });
//   }
// });

// app.put('/api/projects/:id', async (req, res) => {
//   try {
//     const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//     if (!updated) return res.status(404).json({ message: 'Project not found' });
//     res.json(updated);
//   } catch (err) {
//     res.status(400).json({ message: 'Update error', error: err.message });
//   }
// });

// app.delete('/api/projects/:id', async (req, res) => {
//   try {
//     const deleted = await Project.findByIdAndDelete(req.params.id);
//     if (!deleted) return res.status(404).json({ message: 'Project not found' });
//     res.json({ message: 'Project deleted' });
//   } catch (err) {
//     res.status(500).json({ message: 'Delete error', error: err.message });
//   }
// });

// // ======== Custom Feature Routes ======== //
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);
// app.use('/api/gallery', imageRoutes); // ✅ GALLERY ROUTE

// // ======== Fallback Route ======== //
// app.use('*', (req, res) => {
//   res.status(404).json({ message: 'API route not found' });
// });

// // ======== Start Server ======== //
// app.listen(PORT, () => {
//   console.log(`🚀 Server running at http://localhost:${PORT}`);
// });




// import express from 'express';
// import mongoose from 'mongoose';
// import cors from 'cors';
// import bodyParser from 'body-parser';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';

// import User from './src/models/User.js';
// import Client from './src/models/Client.js';
// import Project from './src/models/Project.js';
// import workRoutes from './src/routes/workRoutes.js';
// import referralRoutes from './src/routes/referralRoutes.js';
// import galleryRoutes from './src/routes/galleryRoutes.js';

// dotenv.config();
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(bodyParser.json({ limit: '10mb' }));
// app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));
// app.use('/uploads', express.static('uploads'));
// app.use('/api/gallery', galleryRoutes);

// // JWT Authentication Middleware
// const authenticateToken = (req, res, next) => {
//   const authHeader = req.headers['authorization'];
//   const token = authHeader?.split(' ')[1];
//   if (!token) return res.status(401).json({ message: 'Access token required' });

//   jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
//     if (err) return res.status(403).json({ message: 'Invalid or expired token' });
//     req.user = user;
//     next();
//   });
// };

// // Routes
// app.use('/api/work', workRoutes);
// app.use('/api/referrals', referralRoutes);

// // MongoDB Connection
// mongoose
//   .connect(process.env.MONGO_URL, { dbName: process.env.dbName })
//   .then(() => console.log('MongoDB connected'))
//   .catch((err) => console.error('MongoDB connection error:', err));

// // Auth Routes
// app.post('/api/signup', async (req, res) => {
//   const { fullName, email, password } = req.body;
//   try {
//     const existingUser = await User.findOne({ email });
//     if (existingUser) return res.status(400).json({ message: 'Email already exists' });

//     const hashedPassword = await bcrypt.hash(password, Number(process.env.SALT_ROUNDS));
//     const user = new User({ fullName, email, password: hashedPassword });
//     await user.save();
//     res.status(200).json({ message: 'Signup successful' });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.post('/api/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const user = await User.findOne({ email });
//     if (!user) return res.status(400).json({ message: 'Invalid credentials' });

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

//     const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: '80h',
//     });

//     res.status(200).json({ message: 'Login successful', token, user: { id: user._id, email: user.email } });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Client CRUD
// app.get('/api/clients', async (req, res) => {
//   const clients = await Client.find();
//   res.json(clients);
// });

// app.post('/api/clients', async (req, res) => {
//   const newClient = new Client(req.body);
//   await newClient.save();
//   res.status(201).json(newClient);
// });

// app.put('/api/clients/:id', async (req, res) => {
//   const updated = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
//   res.json(updated);
// });

// app.delete('/api/clients/:id', async (req, res) => {
//   await Client.findByIdAndDelete(req.params.id);
//   res.json({ message: 'Client deleted' });
// });

// // ✅ Project CRUD with Auth and Pagination
// app.get('/api/projects', authenticateToken, async (req, res) => {
//   try {
//     const { page = 1, limit = 10, search = '', status } = req.query;
//     const query = {
//       name: { $regex: search, $options: 'i' },
//       ...(status ? { status } : {}),
//     };

//     const total = await Project.countDocuments(query);
//     const projects = await Project.find(query)
//       .skip((page - 1) * limit)
//       .limit(Number(limit));

//     res.json({ projects, total });
//   } catch (err) {
//     console.error('Error fetching projects:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.post('/api/projects', authenticateToken, async (req, res) => {
//   const newProject = new Project(req.body);
//   await newProject.save();
//   res.status(201).json(newProject);
// });

// app.get('/api/projects/:id', authenticateToken, async (req, res) => {
//   const project = await Project.findById(req.params.id);
//   res.json(project);
// });

// app.put('/api/projects/:id', authenticateToken, async (req, res) => {
//   const updated = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
//   res.json(updated);
// });

// app.delete('/api/projects/:id', authenticateToken, async (req, res) => {
//   await Project.findByIdAndDelete(req.params.id);
//   res.json({ message: 'Project deleted' });
// });

// // Start server
// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });


