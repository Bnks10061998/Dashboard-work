// import React, { useState } from 'react';
// import html2pdf from 'html2pdf.js';
// import logo from '../assets/Logo.jpg';

// const Invoices = () => {
//   const [invoiceData, setInvoiceData] = useState({
//     invoiceNumber: '',
//     clientName: '',
//     clientEmail: '',
//     billingAddress: '',
//     date: '',
//     items: [{ description: '', quantity: 1, rate: 0 }],
//     discount: 0, // Add discount field
//     taxPercentage: 10, // Default tax percentage
//   });

//   const handleItemChange = (index, field, value) => {
//     const items = [...invoiceData.items];
//     items[index][field] = value;
//     setInvoiceData({ ...invoiceData, items });
//   };

//   const addItem = () => {
//     setInvoiceData({ ...invoiceData, items: [...invoiceData.items, { description: '', quantity: 1, rate: 0 }] });
//   };

//   const removeItem = (index) => {
//     const items = [...invoiceData.items];
//     items.splice(index, 1);
//     setInvoiceData({ ...invoiceData, items });
//   };

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setInvoiceData({ ...invoiceData, [name]: value });
//   };

//   const subtotal = invoiceData.items.reduce((sum, item) => sum + item.quantity * item.rate, 0);
//   const discountAmount = (subtotal * invoiceData.discount) / 100;
//   const netValue = subtotal - discountAmount;
//   const tax = (netValue * invoiceData.taxPercentage) / 100;
//   const total = netValue + tax;

//   const downloadPDF = () => {
//     const element = document.getElementById('invoice-preview');
//     const options = {
//       margin: [20, 20],
//       filename: `${invoiceData.invoiceNumber}.pdf`,
//       image: { type: 'jpeg', quality: 0.98 },
//       html2canvas: { scale: 2 },
//       jsPDF: {
//         unit: 'in',
//         format: 'letter',
//         orientation: 'portrait',
//       },
//     };

//     // Customize the PDF layout using the following structure
//     html2pdf()
//       .from(element)
//       .set(options)
//       .toPdf()
//       .get('pdf')
//       .then((pdf) => {
//         // Add company logo
//         const logo = 'logo'; 
//         pdf.addImage(logo, 'PNG', 0.5, 0.5, 1.5, 1.5); // Position and size of the logo

//         // Add header
//         pdf.setFontSize(20);
//         pdf.setTextColor(0, 0, 0);
//         pdf.text('Invoice', 3, 1); // Set invoice title

//         // Add company name, address, and contact info
//         pdf.setFontSize(12);
//         pdf.text('Company Name', 3, 1.5);
//         pdf.text('123 Business Street, City, Country', 3, 1.75);
//         pdf.text('Email: info@company.com | Phone: (123) 456-7890', 3, 2);

//         // Draw a line for separation
//         pdf.setDrawColor(0, 0, 0);
//         pdf.line(0.5, 2.2, 7.5, 2.2); // Line from left to right

//         // Add invoice details (Client Name, Date, etc.)
//         pdf.setFontSize(12);
//         pdf.text(`Invoice #${invoiceData.invoiceNumber}`, 0.5, 2.5);
//         pdf.text(`Date: ${invoiceData.date}`, 0.5, 2.75);
//         pdf.text(`Client: ${invoiceData.clientName}`, 0.5, 3);
//         pdf.text(`Email: ${invoiceData.clientEmail}`, 0.5, 3.25);
//         pdf.text(`Billing Address: ${invoiceData.billingAddress}`, 0.5, 3.5);

//         // Table header for Items
//         pdf.setFontSize(12);
//         pdf.setTextColor(0, 0, 0);
//         pdf.text('Description', 0.5, 4);
//         pdf.text('Quantity', 4.5, 4);
//         pdf.text('Rate', 5.5, 4);
//         pdf.text('Total', 6.5, 4);

//         // Draw table lines
//         pdf.line(0.5, 4.2, 7.5, 4.2); // Top line of the table

//         // Table content: Items list
//         let yPosition = 4.5;
//         invoiceData.items.forEach((item, index) => {
//           pdf.text(item.description, 0.5, yPosition);
//           pdf.text(item.quantity.toString(), 4.5, yPosition);
//           pdf.text(`$${item.rate.toFixed(2)}`, 5.5, yPosition);
//           pdf.text(`$${(item.quantity * item.rate).toFixed(2)}`, 6.5, yPosition);
//           yPosition += 0.5; // Increase line height for next item
//         });

//         // Draw table bottom line
//         pdf.line(0.5, yPosition, 7.5, yPosition);

//         // Add summary (subtotal, discount, net value, tax, and total)
//         yPosition += 0.5;
//         pdf.text(`Subtotal: $${subtotal.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Discount (${invoiceData.discount}%): -$${discountAmount.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Net Value: $${netValue.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Tax (${invoiceData.taxPercentage}%): $${tax.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Total: $${total.toFixed(2)}`, 0.5, yPosition);

//         // Save the generated PDF
//         pdf.save(`${invoiceData.invoiceNumber}.pdf`);
//       });
//   };

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     downloadPDF(); // Automatically download the PDF after form submission
//   };

//   return (
//     <div className="p-6 bg-gray-50 dark:bg-gray-900 min-h-screen text-gray-800 dark:text-white">
//       <div className="max-w-4xl mx-auto bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
//         <h1 className="text-2xl font-bold mb-6">Create New Invoice</h1>
//         <form onSubmit={handleSubmit} className="space-y-6">
//           <input
//             type="text"
//             name="invoiceNumber"
//             placeholder="Invoice Number"
//             onChange={handleChange}
//             value={invoiceData.invoiceNumber}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <input
//             type="text"
//             name="clientName"
//             placeholder="Client Name"
//             onChange={handleChange}
//             value={invoiceData.clientName}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <input
//             type="email"
//             name="clientEmail"
//             placeholder="Client Email"
//             onChange={handleChange}
//             value={invoiceData.clientEmail}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <textarea
//             name="billingAddress"
//             placeholder="Billing Address"
//             onChange={handleChange}
//             value={invoiceData.billingAddress}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <input
//             type="number"
//             name="discount"
//             placeholder="Discount (%)"
//             onChange={handleChange}
//             value={invoiceData.discount}
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           {/* Items Table */}
//           <table className="w-full border-collapse">
//             <thead>
//               <tr>
//                 <th className="p-2 border">Description</th>
//                 <th className="p-2 border">Quantity</th>
//                 <th className="p-2 border">Rate</th>
//                 <th className="p-2 border">Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {invoiceData.items.map((item, index) => (
//                 <tr key={index}>
//                   <td className="p-2 border">
//                     <input
//                       type="text"
//                       value={item.description}
//                       onChange={(e) => handleItemChange(index, 'description', e.target.value)}
//                       required
//                       className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
//                     />
//                   </td>
//                   <td className="p-2 border">
//                     <input
//                       type="number"
//                         value={item.quantity}
//                         onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
//                         min="1"
//                         required
//                         className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
//                         />
//                         </td>
//                         <td className="p-2 border">
//                         <input
//                         type="number"
//                         value={item.rate}
//                         onChange={(e) => handleItemChange(index, 'rate', e.target.value)}
//                         min="0"
//                         required
//                         className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
//                         />
//                         </td>
//                         <td className="p-2 border">
//                         <button
//                         type="button"
//                         onClick={() => removeItem(index)}
//                         className="px-4 py-2 bg-red-600 text-white rounded"
//                         >
//                         Remove
//                         </button>
//                         </td>
//                         </tr>
//                         ))}
//                         </tbody>
//                         </table>
//                         <button type="button" onClick={addItem} className="px-4 py-2 bg-blue-600 text-white rounded mt-4" >
//                         Add Item
//                         </button>
//                         <button type="submit" className="px-6 py-3 bg-green-600 text-white rounded mt-4" >
//                         Generate PDF
//                         </button>
//                         </form>
//                         <div id="invoice-preview" className="hidden">
                      
//                         <div className="bg-white p-6 border rounded shadow-md">
//                         <h2 className="text-2xl font-bold mb-4">Invoice Preview</h2>
//                         </div>
//                         </div>
//                         </div>
//                         </div>
//                         );
//                         };

//                         export default Invoices;


// import React, { useState } from 'react';
// import html2pdf from 'html2pdf.js';
// import logo from '../assets/Logo.jpg'; // Your image import

// const Invoices = () => {
//   const [invoiceData, setInvoiceData] = useState({
//     invoiceNumber: '',
//     clientName: '',
//     clientEmail: '',
//     billingAddress: '',
//     date: '',
//     items: [{ description: '', quantity: 1, rate: 0 }],
//     discount: 0, // Add discount field
//     taxPercentage: 10, // Default tax percentage
//   });

//   const handleItemChange = (index, field, value) => {
//     const items = [...invoiceData.items];
//     items[index][field] = value;
//     setInvoiceData({ ...invoiceData, items });
//   };

//   const addItem = () => {
//     setInvoiceData({ ...invoiceData, items: [...invoiceData.items, { description: '', quantity: 1, rate: 0 }] });
//   };

//   const removeItem = (index) => {
//     const items = [...invoiceData.items];
//     items.splice(index, 1);
//     setInvoiceData({ ...invoiceData, items });
//   };

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setInvoiceData({ ...invoiceData, [name]: value });
//   };

//   const subtotal = invoiceData.items.reduce((sum, item) => sum + item.quantity * item.rate, 0);
//   const discountAmount = (subtotal * invoiceData.discount) / 100;
//   const netValue = subtotal - discountAmount;
//   const tax = (netValue * invoiceData.taxPercentage) / 100;
//   const total = netValue + tax;

//   const downloadPDF = () => {
//     const element = document.getElementById('invoice-preview');
//     const options = {
//       margin: [20, 20],
//       filename: `${invoiceData.invoiceNumber}.pdf`,
//       image: { type: 'jpeg', quality: 0.98 },
//       html2canvas: { scale: 2 },
//       jsPDF: {
//         unit: 'in',
//         format: 'letter',
//         orientation: 'portrait',
//       },
//     };

//     // Customize the PDF layout using the following structure
//     html2pdf()
//       .from(element)
//       .set(options)
//       .toPdf()
//       .get('pdf')
//       .then((pdf) => {
//         // Add company logo
//         const logoUrl = logo; // Use the imported logo

//         // Add the image to the PDF - ensure the image is fully loaded
//         const imgWidth = 1.5;
//         const imgHeight = 1.5;
//         const xPos = 0.5;
//         const yPos = 0.5;

//         pdf.addImage(logoUrl, 'JPEG', xPos, yPos, imgWidth, imgHeight); // Adjusted logo positioning and size

//         // Add header
//         pdf.setFontSize(20);
//         pdf.setTextColor(0, 0, 0);
//         pdf.text('Invoice', 3, 1); // Set invoice title

//         // Add company name, address, and contact info
//         pdf.setFontSize(12);
//         pdf.text('Company Name', 3, 1.5);
//         pdf.text('123 Business Street, City, Country', 3, 1.75);
//         pdf.text('Email: info@company.com | Phone: (123) 456-7890', 3, 2);

//         // Draw a line for separation
//         pdf.setDrawColor(0, 0, 0);
//         pdf.line(0.5, 2.2, 7.5, 2.2); // Line from left to right

//         // Add invoice details (Client Name, Date, etc.)
//         pdf.setFontSize(12);
//         pdf.text(`Invoice #${invoiceData.invoiceNumber}`, 0.5, 2.5);
//         pdf.text(`Date: ${invoiceData.date}`, 0.5, 2.75);
//         pdf.text(`Client: ${invoiceData.clientName}`, 0.5, 3);
//         pdf.text(`Email: ${invoiceData.clientEmail}`, 0.5, 3.25);
//         pdf.text(`Billing Address: ${invoiceData.billingAddress}`, 0.5, 3.5);

//         // Table header for Items
//         pdf.setFontSize(12);
//         pdf.setTextColor(0, 0, 0);
//         pdf.text('Description', 0.5, 4);
//         pdf.text('Quantity', 4.5, 4);
//         pdf.text('Rate', 5.5, 4);
//         pdf.text('Total', 6.5, 4);

//         // Draw table lines
//         pdf.line(0.5, 4.2, 7.5, 4.2); // Top line of the table

//         // Table content: Items list
//         let yPosition = 4.5;
//         invoiceData.items.forEach((item, index) => {
//           pdf.text(item.description, 0.5, yPosition);
//           pdf.text(item.quantity.toString(), 4.5, yPosition);
//           pdf.text(`$${item.rate.toFixed(2)}`, 5.5, yPosition);
//           pdf.text(`$${(item.quantity * item.rate).toFixed(2)}`, 6.5, yPosition);
//           yPosition += 0.5; // Increase line height for next item
//         });

//         // Draw table bottom line
//         pdf.line(0.5, yPosition, 7.5, yPosition);

//         // Add summary (subtotal, discount, net value, tax, and total)
//         yPosition += 0.5;
//         pdf.text(`Subtotal: $${subtotal.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Discount (${invoiceData.discount}%): -$${discountAmount.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Net Value: $${netValue.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Tax (${invoiceData.taxPercentage}%): $${tax.toFixed(2)}`, 0.5, yPosition);
//         yPosition += 0.5;
//         pdf.text(`Total: $${total.toFixed(2)}`, 0.5, yPosition);

//         // Save the generated PDF
//         pdf.save(`${invoiceData.invoiceNumber}.pdf`);
//       });
//   };

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     downloadPDF(); // Automatically download the PDF after form submission
//   };

//   return (
//     <div className="p-6 bg-gray-50 dark:bg-gray-900 min-h-screen text-gray-800 dark:text-white">
//       <div className="max-w-4xl mx-auto bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
//         <h1 className="text-2xl font-bold mb-6">Create New Invoice</h1>
//         <form onSubmit={handleSubmit} className="space-y-6">
//           <input
//             type="text"
//             name="invoiceNumber"
//             placeholder="Invoice Number"
//             onChange={handleChange}
//             value={invoiceData.invoiceNumber}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <input
//             type="text"
//             name="clientName"
//             placeholder="Client Name"
//             onChange={handleChange}
//             value={invoiceData.clientName}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <input
//             type="email"
//             name="clientEmail"
//             placeholder="Client Email"
//             onChange={handleChange}
//             value={invoiceData.clientEmail}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <textarea
//             name="billingAddress"
//             placeholder="Billing Address"
//             onChange={handleChange}
//             value={invoiceData.billingAddress}
//             required
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           <input
//             type="number"
//             name="discount"
//             placeholder="Discount (%)"
//             onChange={handleChange}
//             value={invoiceData.discount}
//             className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
//           />
//           {/* Items Table */}
//           <table className="w-full border-collapse">
//             <thead>
//               <tr>
//                 <th className="p-2 border">Description</th>
//                 <th className="p-2 border">Quantity</th>
//                 <th className="p-2 border">Rate</th>
//                 <th className="p-2 border">Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {invoiceData.items.map((item, index) => (
//                 <tr key={index}>
//                   <td className="p-2 border">
// <input
// type="text"
// value={item.description}
// onChange={(e) => handleItemChange(index, 'description', e.target.value)}
// required
// className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
// />
// </td>
// <td className="p-2 border">
// <input
// type="number"
// value={item.quantity}
// onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
// min="1"
// required
// className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
// />
// </td>
// <td className="p-2 border">
// <input
// type="number"
// value={item.rate}
// onChange={(e) => handleItemChange(index, 'rate', e.target.value)}
// min="0"
// required
// className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
// />
// </td>
// <td className="p-2 border">
// <button
// type="button"
// onClick={() => removeItem(index)}
// className="px-4 py-2 bg-red-600 text-white rounded"
// >
// Remove
// </button>
// </td>
// </tr>
// ))}
// </tbody>
// </table>
// <button type="button" onClick={addItem} className="px-4 py-2 bg-blue-600 text-white rounded mt-4">
// Add Item
// </button>
// <button type="submit" className="px-6 py-3 bg-green-600 text-white rounded mt-4">
// Generate PDF
// </button>
// </form>
// <div id="invoice-preview" className="hidden">
// <div className="bg-white p-6 border rounded shadow-md">
// <h2 className="text-2xl font-bold mb-4">Invoice Preview</h2>
// </div>
// </div>
// </div>
// </div>
// );
// };

// export default Invoices;


import React, { useState } from 'react';
import html2pdf from 'html2pdf.js';
import logo from '../assets/Logo.jpg'; // Your image import

const Invoices = () => {
  const [invoiceData, setInvoiceData] = useState({
    invoiceNumber: '',
    clientName: '',
    clientEmail: '',
    billingAddress: '',
    date: '',
    items: [{ description: '', quantity: 1, rate: 0 }],
    discount: 0, // Add discount field
    taxPercentage: 10, // Default tax percentage
  });

  const handleItemChange = (index, field, value) => {
    const items = [...invoiceData.items];
    items[index][field] = value;
    setInvoiceData({ ...invoiceData, items });
  };

  const addItem = () => {
    setInvoiceData({ ...invoiceData, items: [...invoiceData.items, { description: '', quantity: 1, rate: 0 }] });
  };

  const removeItem = (index) => {
    const items = [...invoiceData.items];
    items.splice(index, 1);
    setInvoiceData({ ...invoiceData, items });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setInvoiceData({ ...invoiceData, [name]: value });
  };

  const subtotal = invoiceData.items.reduce((sum, item) => sum + item.quantity * item.rate, 0);
  const discountAmount = (subtotal * invoiceData.discount) / 100;
  const netValue = subtotal - discountAmount;
  const tax = (netValue * invoiceData.taxPercentage) / 100;
  const total = netValue + tax;

  const downloadPDF = () => {
    const element = document.getElementById('invoice-preview');
    const options = {
      margin: [20, 20],
      filename: `${invoiceData.invoiceNumber}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: {
        unit: 'in',
        format: 'letter',
        orientation: 'portrait',
      },
    };

    // Customize the PDF layout using the following structure
    html2pdf()
      .from(element)
      .set(options)
      .toPdf()
      .get('pdf')
      .then((pdf) => {
        // Add company logo
        const logoUrl = logo; // Use the imported logo

        // Add the image to the PDF - ensure the image is fully loaded
        const imgWidth = 1.5;
        const imgHeight = 1.5;
        const xPos = 0.5;
        const yPos = 0.5;

        pdf.addImage(logoUrl, 'JPEG', xPos, yPos, imgWidth, imgHeight); // Adjusted logo positioning and size

        // Add header
        pdf.setFontSize(20);
        pdf.setTextColor(0, 0, 0);
        pdf.text('Invoice', 3, 1); // Set invoice title

        // Add company name, address, and contact info
        pdf.setFontSize(12);
        pdf.text('Company Name', 3, 1.5);
        pdf.text('123 Business Street, City, Country', 3, 1.75);
        pdf.text('Email: info@company.com | Phone: (123) 456-7890', 3, 2);

        // Draw a line for separation
        pdf.setDrawColor(0, 0, 0);
        pdf.line(0.5, 2.2, 7.5, 2.2); // Line from left to right

        // Add invoice details (Client Name, Date, etc.)
        pdf.setFontSize(12);
        pdf.text(`Invoice #${invoiceData.invoiceNumber}`, 0.5, 2.5);
        pdf.text(`Date: ${invoiceData.date}`, 0.5, 2.75);
        pdf.text(`Client: ${invoiceData.clientName}`, 0.5, 3);
        pdf.text(`Email: ${invoiceData.clientEmail}`, 0.5, 3.25);
        pdf.text(`Billing Address: ${invoiceData.billingAddress}`, 0.5, 3.5);

        // Table header for Items
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        pdf.text('Description', 0.5, 4);
        pdf.text('Quantity', 4.5, 4);
        pdf.text('Rate', 5.5, 4);
        pdf.text('Total', 6.5, 4);

        // Draw table lines
        pdf.line(0.5, 4.2, 7.5, 4.2); // Top line of the table

        // Table content: Items list
        let yPosition = 4.5;
        invoiceData.items.forEach((item, index) => {
          pdf.text(item.description, 0.5, yPosition);
          pdf.text(item.quantity.toString(), 4.5, yPosition);
          pdf.text(`$${item.rate.toFixed(2)}`, 5.5, yPosition);
          pdf.text(`$${(item.quantity * item.rate).toFixed(2)}`, 6.5, yPosition);
          yPosition += 0.5; // Increase line height for next item
        });

        // Draw table bottom line
        pdf.line(0.5, yPosition, 7.5, yPosition);

        // Add summary (subtotal, discount, net value, tax, and total)
        yPosition += 0.5;
        pdf.text(`Subtotal: $${subtotal.toFixed(2)}`, 0.5, yPosition);
        yPosition += 0.5;
        pdf.text(`Discount (${invoiceData.discount}%): -$${discountAmount.toFixed(2)}`, 0.5, yPosition);
        yPosition += 0.5;
        pdf.text(`Net Value: $${netValue.toFixed(2)}`, 0.5, yPosition);
        yPosition += 0.5;
        pdf.text(`Tax (${invoiceData.taxPercentage}%): $${tax.toFixed(2)}`, 0.5, yPosition);
        yPosition += 0.5;
        pdf.text(`Total: $${total.toFixed(2)}`, 0.5, yPosition);

        // Save the generated PDF
        pdf.save(`${invoiceData.invoiceNumber}.pdf`);
      });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    downloadPDF(); // Automatically download the PDF after form submission
  };

  return (
    <div className="p-6 bg-gray-50 dark:bg-gray-900 min-h-screen text-gray-800 dark:text-white">
      <div className="max-w-4xl mx-auto bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
        <h1 className="text-2xl font-bold mb-6">Create New Invoice</h1>
        <form onSubmit={handleSubmit} className="space-y-6">
          <input
            type="text"
            name="invoiceNumber"
            placeholder="Invoice Number"
            onChange={handleChange}
            value={invoiceData.invoiceNumber}
            required
            className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
          />
          <input
            type="text"
            name="clientName"
            placeholder="Client Name"
            onChange={handleChange}
            value={invoiceData.clientName}
            required
            className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
          />
          <input
            type="email"
            name="clientEmail"
            placeholder="Client Email"
            onChange={handleChange}
            value={invoiceData.clientEmail}
            required
            className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
          />
          <textarea
            name="billingAddress"
            placeholder="Billing Address"
            onChange={handleChange}
            value={invoiceData.billingAddress}
            required
            className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
          />
          <input
            type="number"
            name="discount"
            placeholder="Discount (%)"
            onChange={handleChange}
            value={invoiceData.discount}
            className="p-2 border rounded dark:bg-gray-700 dark:border-gray-600 w-full"
          />
          {/* Items Table */}
          <table className="w-full border-collapse">
            <thead>
              <tr>
                <th className="p-2 border">Description</th>
                <th className="p-2 border">Quantity</th>
                <th className="p-2 border">Rate</th>
                <th className="p-2 border">Actions</th>
              </tr>
            </thead>
            <tbody>
              {invoiceData.items.map((item, index) => (
                <tr key={index}>
                  <td className="p-2 border">
                    <input
                      type="text"
                      value={item.description}
                      onChange={(e) => handleItemChange(index, 'description', e.target.value)}
                      required
                      className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
                    />
                  </td>
                  <td className="p-2 border">
                    <input
                      type="number"
                      value={item.quantity}
                      onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
                      min="1"
                      required
                      className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
                    />
                  </td>
                  <td className="p-2 border">
                    <input
                      type="number"
                      value={item.rate}
                      onChange={(e) => handleItemChange(index, 'rate', e.target.value)}
                      min="0"
                      required
                      className="p-1 border rounded dark:bg-gray-700 dark:border-gray-600"
                    />
                  </td>
                  <td className="p-2 border">
                    <button
                      type="button"
                      onClick={() => removeItem(index)}
                      className="px-4 py-2 bg-red-600 text-white rounded"
                    >
                      Remove
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          <button type="button" onClick={addItem} className="px-4 py-2 bg-blue-600 text-white rounded mt-4">
            Add Item
          </button>
          <button type="submit" className="px-6 py-3 bg-green-600 text-white rounded mt-4">
            Generate PDF
          </button>
        </form>
        <div id="invoice-preview" className="hidden">
          <div className="bg-white p-6 border rounded shadow-md">
            <h2 className="text-2xl font-bold mb-4">Invoice Preview</h2>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Invoices;


import firebase from "firebase/app";
import "firebase/firestore";  // Import Firestore

// Your Firebase configuration
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  databaseURL: "https://<your-project-id>.firebaseio.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID",
  measurementId: "YOUR_MEASUREMENT_ID",
};

// Initialize Firebase
const firebaseApp = firebase.initializeApp(firebaseConfig);
const db = firebaseApp.firestore();

export { db };


